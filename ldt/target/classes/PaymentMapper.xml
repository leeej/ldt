<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="PaymentMapper">
	<resultMap type="Payment" id="PaymentMap">
		<!-- 다른 행들과 구분해 줄 수 있는 컬럼(Primary key) -->
		<id column="payment_id" property="payment_id" />
		<result column="date" property="date" />
		<result column="is_paid" property="is_paid" /> 
		<!-- Payment:User의 관계가 1:1 association -->
		<association property="user" javaType="User">
			<id column="user_id" property="user_id" />
			<result column="user_name" property="user_name" />
			<result column="phone" property="phone" />
			<result column="car_number" property="car_number" />
			<result column="l_point" property="l_point" />
		</association>
		<!-- Payment:Orderline의 관계가 1:many collection -->
		<collection property="orderline" ofType="Orderline">
			<id column="order_id" property="order_id"/>
			<id column="menu_id" property="menu.menu_id"/>
			<result column="quantity" property="quantity"/>
			<!-- Orderline:Menu의 관계가 1:1 association -->
			<association property="menu" javaType="Menu">
				<id column="menu_id" property="menu_id"/>
				<result column="menu_name" property="menu_name"/>
				<result column="menu_price" property="menu_price"/>
			</association>
		</collection>
	</resultMap>
	
	<select id="selectAllPayment" resultMap="PaymentMap">
		SELECT * FROM payment 
		JOIN user ON payment.user_id = user.user_id
		JOIN orderline ON payment.payment_id = orderline.order_id
		JOIN menu ON menu.menu_id = orderline.menu_id
		ORDER BY payment_id DESC
	</select>
	
	<select id="selectByCar_number" resultMap="PaymentMap" parameterType="string">
		SELECT * FROM payment 
		JOIN user ON payment.user_id = user.user_id
		JOIN orderline ON payment.payment_id = orderline.order_id
		JOIN menu ON menu.menu_id = orderline.menu_id
		WHERE user.car_number = #{car_number} AND payment.is_paid = 'N' 
		AND payment_id = (
		SELECT MAX(payment_id) FROM payment 
		JOIN user ON payment.user_id = user.user_id
		JOIN orderline ON payment.payment_id = orderline.order_id
		JOIN menu ON menu.menu_id = orderline.menu_id
		WHERE user.car_number = #{car_number} AND payment.is_paid = 'N');
	</select>

	<select id="selectByPayment_id" resultMap="PaymentMap" parameterType="int">
		SELECT * FROM payment 
		JOIN user ON payment.user_id = user.user_id
		JOIN orderline ON payment.payment_id = orderline.order_id
		JOIN menu ON menu.menu_id = orderline.menu_id
		WHERE payment_id = #{payment_id}
	</select>


	<insert id="insertPayment" parameterType="Payment">
		INSERT INTO payment
		VALUES (null , #{user.user_id}, sysdate(), 'N')
	</insert>
	
	<insert id="insertLine" parameterType="Orderline">
		<!-- order="BEFORE" insert구문을 수행하기 전에 select작업을 수행하라 -->
		<selectKey keyProperty="order_id" resultType="int" order="BEFORE">
			<!-- 주문번호 최대값 반환, 없으면 null대신 0 반환 -->
			SELECT IFNULL(MAX(payment_id), 0) FROM payment
		</selectKey>
		INSERT INTO orderline VALUES (#{order_id}, #{menu.menu_id}, #{quantity})
	</insert>
	
	<update id="updatePayment" parameterType="int">
		UPDATE payment SET is_paid = 'Y'
		WHERE payment_id = #{payment_id}
	</update>
	
	<delete id="deletePayment" parameterType="int">
		DELETE payment
		WHERE payment_id = #{payment_id}
	</delete>
	
</mapper>